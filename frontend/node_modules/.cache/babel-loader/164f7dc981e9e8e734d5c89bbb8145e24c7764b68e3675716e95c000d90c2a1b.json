{"ast":null,"code":"var _jsxFileName = \"/Users/juneworld/Desktop/demo-map/src/components/Form/Mul.js\";\nimport React, { Component } from \"react\";\nimport Step1 from \"./Step1\";\nimport Step2 from \"./Step2\";\nimport Step3 from \"./Step3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MultiStepForm extends Component {\n  constructor(props) {\n    super(props);\n    // Function to handle form submission for each step\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        step,\n        formData\n      } = this.state;\n\n      // Validate the current step's fields\n      if (this.validateStep(step)) {\n        // If the current step is the last step, you can submit the form data\n        if (step === 3) {\n          // Handle form submission or API request here\n          console.log(\"Form submitted:\", formData);\n        } else {\n          // Proceed to the next step\n          this.setState({\n            step: step + 1\n          });\n          console.log(\"Form submitted:\", formData);\n        }\n      }\n    };\n    // Function to validate the fields for the current step\n    this.validateStep = step => {\n      const {\n        formData\n      } = this.state;\n      let errors = {};\n\n      // Add validation logic here for each step\n      if (step === 1) {\n        if (!formData.toiletName) {\n          errors = {\n            ...errors,\n            toiletName: \"Toilet Name is required\"\n          };\n        }\n      } else if (step === 2) {\n        if (!formData.address) {\n          errors.address = \"Address is required\";\n        }\n        if (!formData.district) {\n          errors.district = \"District is required\";\n        }\n        if (!formData.province) {\n          errors.province = \"Province is required\";\n        }\n        if (!formData.zipCode) {\n          errors.zipCode = \"Zip Code is required\";\n        }\n      }\n\n      // Update the state with validation errors (if any)\n      this.setState({\n        errors\n      });\n      console.log(errors);\n      // Return true if there are no validation errors\n      return Object.keys(errors).length === 0;\n    };\n    // Function to update form data when input fields change\n    this.handleInputChange = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      const {\n        formData\n      } = this.state;\n      this.setState({\n        formData: {\n          ...formData,\n          [name]: value\n        }\n      });\n    };\n    // Function to go to the previous step\n    this.goToPreviousStep = () => {\n      const {\n        step\n      } = this.state;\n      if (step > 1) {\n        this.setState({\n          step: step - 1\n        });\n      }\n    };\n    this.state = {\n      step: 1,\n      formData: {\n        toiletName: \"\",\n        address: \"\",\n        district: \"\",\n        province: \"\",\n        zipCode: \"\"\n      },\n      errors: {}\n    };\n  }\n  render() {\n    const {\n      step,\n      formData,\n      errors\n    } = this.state;\n    const FormTitles = [\"Toilet details\", \"Toilet location\", \" \"];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: FormTitles[step - 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [step === 1 && /*#__PURE__*/_jsxDEV(Step1, {\n          formData: formData,\n          errors: errors,\n          handleChange: this.handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), step === 2 && /*#__PURE__*/_jsxDEV(Step2, {\n          formData: formData,\n          errors: errors,\n          handleChange: this.handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), step === 3 && /*#__PURE__*/_jsxDEV(Step3, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-navigation\",\n          children: [step > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: this.goToPreviousStep,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), step < 3 && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 26\n          }, this), step === 3 && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default MultiStepForm;","map":{"version":3,"names":["React","Component","Step1","Step2","Step3","jsxDEV","_jsxDEV","MultiStepForm","constructor","props","handleSubmit","event","preventDefault","step","formData","state","validateStep","console","log","setState","errors","toiletName","address","district","province","zipCode","Object","keys","length","handleInputChange","name","value","target","goToPreviousStep","render","FormTitles","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","handleChange","type","onClick"],"sources":["/Users/juneworld/Desktop/demo-map/src/components/Form/Mul.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Step1 from \"./Step1\";\nimport Step2 from \"./Step2\";\nimport Step3 from \"./Step3\";\n\nclass MultiStepForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      step: 1,\n      formData: {\n        toiletName: \"\",\n        address: \"\",\n        district: \"\",\n        province: \"\",\n        zipCode: \"\",\n      },\n      errors: {},\n    };\n  }\n\n  // Function to handle form submission for each step\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { step, formData } = this.state;\n\n    // Validate the current step's fields\n    if (this.validateStep(step)) {\n      // If the current step is the last step, you can submit the form data\n      if (step === 3) {\n        // Handle form submission or API request here\n        console.log(\"Form submitted:\", formData);\n      } else {\n        // Proceed to the next step\n        this.setState({ step: step + 1 });\n        console.log(\"Form submitted:\", formData);\n      }\n    }\n  };\n\n  // Function to validate the fields for the current step\n  validateStep = (step) => {\n    const { formData } = this.state;\n    let errors = {};\n\n    // Add validation logic here for each step\n    if (step === 1) {\n      if (!formData.toiletName) {\n        errors = { ...errors, toiletName: \"Toilet Name is required\" };\n      }\n    } else if (step === 2) {\n      if (!formData.address) {\n        errors.address = \"Address is required\";\n      }\n      if (!formData.district) {\n        errors.district = \"District is required\";\n      }\n      if (!formData.province) {\n        errors.province = \"Province is required\";\n      }\n      if (!formData.zipCode) {\n        errors.zipCode = \"Zip Code is required\";\n      }\n    }\n\n    // Update the state with validation errors (if any)\n    this.setState({ errors });\n    console.log(errors);\n    // Return true if there are no validation errors\n    return Object.keys(errors).length === 0;\n  };\n\n  // Function to update form data when input fields change\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    const { formData } = this.state;\n    this.setState({ formData: { ...formData, [name]: value } });\n  };\n\n  // Function to go to the previous step\n  goToPreviousStep = () => {\n    const { step } = this.state;\n    if (step > 1) {\n      this.setState({ step: step - 1 });\n    }\n  };\n\n  render() {\n    const { step, formData, errors } = this.state;\n    const FormTitles = [\"Toilet details\", \"Toilet location\", \" \"];\n    return (\n      <div>\n        <div className=\"header\">\n          <h1>{FormTitles[step - 1]}</h1>\n        </div>\n        <form onSubmit={this.handleSubmit}>\n          {step === 1 && (\n            <Step1\n              formData={formData}\n              errors={errors}\n              handleChange={this.handleInputChange}\n            />\n          )}\n          {step === 2 && (\n            <Step2\n              formData={formData}\n              errors={errors}\n              handleChange={this.handleInputChange}\n            />\n          )}\n          {step === 3 && <Step3 />}\n          <div className=\"form-navigation\">\n            {step > 1 && (\n              <button type=\"button\" onClick={this.goToPreviousStep}>\n                Previous\n              </button>\n            )}\n            {step < 3 && <button type=\"submit\">Next</button>}\n            {step === 3 && <button type=\"submit\">Submit</button>}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MultiStepForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}